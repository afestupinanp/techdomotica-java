package techdomotica.java.forms.devices;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

import techdomotica.objs.Ambiente;
import techdomotica.objs.Conectar;
import techdomotica.objs.comps.Componente;

public class DeviceHistory extends javax.swing.JFrame {

    private Ambiente ambiente;
    private Conectar conx;
    
    private ArrayList<Componente> devices = new ArrayList();
    
    public DeviceHistory(Ambiente amb) {
        setIconImage(new ImageIcon(getClass().getResource("/resources/media/L4.png")).getImage());
        initComponents();
        ambiente = amb;
        conx = amb.getConnection();
        loadTable();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDevices = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        checkTable = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Historial de dispositivos - Tech Domótica");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Historial de dispositivos");

        tableDevices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableDevices);

        checkTable.setText("Mostrar dispositivos desinstalados");
        checkTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(checkTable)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(checkTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTableActionPerformed
        loadTable();
    }//GEN-LAST:event_checkTableActionPerformed

    public void loadTable() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("#");
        model.addColumn("Modelo");
        model.addColumn("Marca");
        model.addColumn("Gasto energético");
        model.addColumn("Tiempo de vida (%)");
        String query = "";
        if(checkTable.isSelected()) {
            model.addColumn("Estado");
            query = "SELECT id_componente, nom_componente, marca, uso, gasto_energetico, habilitado FROM componente WHERE 1;";
        }
        else {            
            query = "SELECT id_componente, nom_componente, marca, uso, gasto_energetico, habilitado FROM componente WHERE habilitado = 1;";
        }
        if(conx.executeRS(query)) {
            tableDevices.getTableHeader().setReorderingAllowed(false);            
            devices.clear();
            while(conx.nextRow()) {
                //Esto no es bonito, pero aquí voy... :v
                Componente user = new Componente(String.valueOf(conx.getResultSetRow("nom_componente")), String.valueOf(conx.getResultSetRow("marca")), Double.parseDouble(String.valueOf(conx.getResultSetRow("uso"))));
                user.setGastoEnergetico(Double.parseDouble(String.valueOf(conx.getResultSetRow("gasto_energetico"))));
                devices.add(user);
                Object[] fila;
                if(checkTable.isSelected()) {
                    String desh = (Integer.parseInt(String.valueOf(conx.getResultSetRow("habilitado"))) == 1 ? "Habilitado" : "Deshabilitado");
                    Object[] filaCopy = {conx.getResultSetRow("id_componente"), conx.getResultSetRow("nom_componente"), conx.getResultSetRow("marca"), conx.getResultSetRow("gasto_energetico") + " Watts", conx.getResultSetRow("uso") + "%", desh};
                    fila = Arrays.copyOf(filaCopy, filaCopy.length);
                }
                else {
                    Object[] filaCopy = {conx.getResultSetRow("id_componente"), conx.getResultSetRow("nom_componente"), conx.getResultSetRow("marca"), conx.getResultSetRow("gasto_energetico") + " Watts", conx.getResultSetRow("uso") + "%"};
                    fila = Arrays.copyOf(filaCopy, filaCopy.length);
                }
                model.addRow(fila);
            }
            
        }
        else {
            Object[] lol = {"No hay datos"};
            model.addRow(lol);
        }
        tableDevices.setModel(model);
        tableDevices.setRowSelectionInterval(0, 0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeviceHistory(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableDevices;
    // End of variables declaration//GEN-END:variables
}
