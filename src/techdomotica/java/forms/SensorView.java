package techdomotica.java.forms;

import java.awt.Image;
import javax.swing.ImageIcon;
import techdomotica.objs.Ambiente;

public class SensorView extends javax.swing.JFrame {
    
    private Ambiente ambiente;
  
    public SensorView(Ambiente amb) {
        ambiente = amb;
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/resources/media/L4.png")).getImage());
        checkDoorState();
        checkSensorState();
        if(ambiente.getSensor(0) != null) labelDeviceName.setText("Estado de " + ambiente.getSensor(0).getComponenteFullName());
        if(ambiente.getSensor(1) != null) labelDeviceName1.setText("Estado de " + ambiente.getSensor(1).getComponenteFullName());
    }

    public void checkSensorState() {
        if(ambiente.getSensor(1) != null) {
            devicetwo.setVisible(false);
            tDetectedHoy1.setText(tDetectedHoy1.getText() + ambiente.getPersonasDetectadasP());
            if(ambiente.getSensor(1).getComponenteEncendidoState()) {
                sensoricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/sensoron.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
                activestate1.setSelected(true);
            }
            else {
                sensoricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/sensoroff.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
                inactivestate1.setSelected(true);
            }
        }
        else {
            tDetectedHoy1.setText(tDetectedHoy1.getText() + " N/A");
            tDetectedLifetime1.setText(tDetectedLifetime1.getText() + " N/A");
            devicetwo.setVisible(true);
            sensoricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/nosignal2.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
            labelDeviceName1.setText("No hay dispositivo.");
            activestate1.setEnabled(false);
            activestate1.setToolTipText("No se detectó dispositivo. Registra uno en el gestor de dispositivos.");
            inactivestate1.setEnabled(false);
            inactivestate1.setToolTipText("No se detectó dispositivo. Registra uno en el gestor de dispositivos.");
        }
    }
    
    public void checkDoorState() {
        if(ambiente.getSensor(0) != null) {
            deviceone.setVisible(false);
            tDetectedHoy.setText(tDetectedHoy.getText() + ambiente.getPersonasDetectadasP());
            if(ambiente.getSensor(0).getComponenteEncendidoState()) {
                dooricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/dooron.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
                activestate.setSelected(true);
            }
            else {
                dooricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/dooroff.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
                inactivestate.setSelected(true);
            }
        }
        else {
            tDetectedHoy.setText(tDetectedHoy.getText() + " N/A");
            tDetectedLifetime.setText(tDetectedLifetime.getText() + " N/A");
            deviceone.setVisible(true);
            dooricon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/resources/media/simulator/nosignal2.png")).getImage().getScaledInstance(313, 204, Image.SCALE_SMOOTH)));
            labelDeviceName.setText("No hay dispositivo.");
            activestate.setEnabled(false);
            activestate.setToolTipText("No se detectó dispositivo. Registra uno en el gestor de dispositivos.");
            inactivestate.setEnabled(false);
            inactivestate.setToolTipText("No se detectó dispositivo. Registra uno en el gestor de dispositivos.");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnactivedevice1 = new javax.swing.ButtonGroup();
        btnactivedevice2 = new javax.swing.ButtonGroup();
        dooricon = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        activestate = new javax.swing.JRadioButton();
        inactivestate = new javax.swing.JRadioButton();
        labelDeviceName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tDetectedHoy = new javax.swing.JLabel();
        tDetectedLifetime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelDeviceName1 = new javax.swing.JLabel();
        activestate1 = new javax.swing.JRadioButton();
        inactivestate1 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        tDetectedHoy1 = new javax.swing.JLabel();
        tDetectedLifetime1 = new javax.swing.JLabel();
        sensoricon = new javax.swing.JLabel();
        deviceone = new javax.swing.JButton();
        devicetwo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estadísticas de los sensores - Tech Domótica");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sensor de puerta");

        btnactivedevice1.add(activestate);
        activestate.setText("Activo");
        activestate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activestateActionPerformed(evt);
            }
        });

        btnactivedevice1.add(inactivestate);
        inactivestate.setText("Inactivo");
        inactivestate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactivestateActionPerformed(evt);
            }
        });

        labelDeviceName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDeviceName.setText("Estado de");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Estadísticas");

        tDetectedHoy.setText("Cantidad de personas detectadas (hoy): ");

        tDetectedLifetime.setText("Cantidad de personas detectadas (total):");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sensor de movimiento");

        labelDeviceName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDeviceName1.setText("Estado de");

        btnactivedevice2.add(activestate1);
        activestate1.setText("Activo");
        activestate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activestate1ActionPerformed(evt);
            }
        });

        btnactivedevice2.add(inactivestate1);
        inactivestate1.setText("Inactivo");
        inactivestate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactivestate1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Estadísticas");

        tDetectedHoy1.setText("Cantidad de personas detectadas (hoy): ");

        tDetectedLifetime1.setText("Cantidad de personas detectadas (total):");

        deviceone.setText("Registrar dispositivo");
        deviceone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceoneActionPerformed(evt);
            }
        });

        devicetwo.setText("Registrar dispositivo");
        devicetwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devicetwoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dooricon, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensoricon, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelDeviceName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(activestate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(inactivestate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelDeviceName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(activestate1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(inactivestate1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tDetectedHoy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tDetectedLifetime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tDetectedHoy1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tDetectedLifetime1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(deviceone)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(devicetwo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(activestate)
                            .addComponent(inactivestate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tDetectedHoy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tDetectedLifetime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deviceone))
                    .addComponent(dooricon, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sensoricon, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDeviceName1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(activestate1)
                            .addComponent(inactivestate1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tDetectedHoy1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tDetectedLifetime1)
                        .addGap(18, 18, 18)
                        .addComponent(devicetwo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activestateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activestateActionPerformed
        progressDialog dialog = new progressDialog(this, true, 3) {
            @Override
            public void progressBarFilled() {
                ambiente.getSensor(0).toggleComponenteEncendido(true);
                checkDoorState();
            }
        };
        dialog.setTitle("Encendiendo sensor de puerta");
        dialog.textVar.setText("Encendiendo el sensor de la puerta. Por favor, espere...");
        dialog.setVisible(true);
    }//GEN-LAST:event_activestateActionPerformed

    private void inactivestateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactivestateActionPerformed
        progressDialog dialog = new progressDialog(this, true, 3) {
            @Override
            public void progressBarFilled() {
                ambiente.getSensor(0).toggleComponenteEncendido(false);
                checkDoorState();
            }
        };
        dialog.setTitle("Apagando sensor de puerta");
        dialog.textVar.setText("Apagando el sensor de la puerta. Por favor, espere...");
        dialog.setVisible(true);
    }//GEN-LAST:event_inactivestateActionPerformed

    private void activestate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activestate1ActionPerformed
        // TODO add your handling code here:
        progressDialog dialog = new progressDialog(this, true, 3) {
            @Override
            public void progressBarFilled() {
                ambiente.getSensor(1).toggleComponenteEncendido(true);
                checkSensorState();
            }
        };
        dialog.setTitle("Apagando sensor de movimiento");
        dialog.textVar.setText("Apagando el sensor de movimiento. Por favor, espere...");
        dialog.setVisible(true);
    }//GEN-LAST:event_activestate1ActionPerformed

    private void inactivestate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactivestate1ActionPerformed
        // TODO add your handling code here:
        progressDialog dialog = new progressDialog(this, true, 3) {
            @Override
            public void progressBarFilled() {
                ambiente.getSensor(1).toggleComponenteEncendido(false);
                checkSensorState();
            }
        };
        dialog.setTitle("Apagando sensor de movimiento");
        dialog.textVar.setText("Apagando el sensor de movimiento. Por favor, espere...");
        dialog.setVisible(true);
    }//GEN-LAST:event_inactivestate1ActionPerformed

    private void deviceoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceoneActionPerformed
        // TODO add your handling code here:
        ambiente.toggleAmbienteThread();
        ambiente.getAmbienteThread().interrupt();
        DeviceManager dmanager = new DeviceManager(ambiente) {
            @Override
            public void saveChangesToMain() {
                super.saveChangesToMain();
                //System.out.println("We're out of here!");
                ambiente.startAmbienteThread();
                ambiente.toggleAmbienteThread();
                
            }
        };
        dmanager.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_deviceoneActionPerformed

    private void devicetwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devicetwoActionPerformed
        ambiente.toggleAmbienteThread();
        ambiente.getAmbienteThread().interrupt();
        DeviceManager dmanager = new DeviceManager(ambiente) {
            @Override
            public void saveChangesToMain() {
                super.saveChangesToMain();
                //System.out.println("We're out of here!");
                ambiente.startAmbienteThread();
                ambiente.toggleAmbienteThread();
                
            }
        };
        dmanager.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_devicetwoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SensorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SensorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SensorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SensorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SensorView(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton activestate;
    private javax.swing.JRadioButton activestate1;
    private javax.swing.ButtonGroup btnactivedevice1;
    private javax.swing.ButtonGroup btnactivedevice2;
    private javax.swing.JButton deviceone;
    private javax.swing.JButton devicetwo;
    private javax.swing.JLabel dooricon;
    private javax.swing.JRadioButton inactivestate;
    private javax.swing.JRadioButton inactivestate1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel labelDeviceName;
    private javax.swing.JLabel labelDeviceName1;
    private javax.swing.JLabel sensoricon;
    private javax.swing.JLabel tDetectedHoy;
    private javax.swing.JLabel tDetectedHoy1;
    private javax.swing.JLabel tDetectedLifetime;
    private javax.swing.JLabel tDetectedLifetime1;
    // End of variables declaration//GEN-END:variables
}
